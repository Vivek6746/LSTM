import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM
import math
from sklearn.metrics import mean_squared_error


aapl = yf.download('AAPL', start='2010-01-01', end='2023-01-01')

training_data = aapl['Adj Close']['2010-01-01':'2020-12-31']
validation_data = aapl['Adj Close']['2021-01-01':'2023-01-01']

training_set = training_data.values.reshape(-1, 1)
validation_set = validation_data.values.reshape(-1, 1)

sc = MinMaxScaler(feature_range=(0, 1))
training_set_scaled = sc.fit_transform(training_set)
validation_set_scaled = sc.transform(validation_set)

def create_sequences(data, seq_length=60):
    X = []
    y = []
    for i in range(seq_length, len(data)):
        X.append(data[i-seq_length:i, 0])
        y.append(data[i, 0])
    return np.array(X), np.array(y)

X_train, y_train = create_sequences(training_set_scaled)
X_validation, y_validation = create_sequences(validation_set_scaled)

X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
X_validation = np.reshape(X_validation, (X_validation.shape[0], X_validation.shape[1], 1))

model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(LSTM(units=50, return_sequences=True))
model.add(LSTM(units=50))
model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mean_squared_error')

history = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_data=(X_validation, y_validation))

predicted_stock_price = model.predict(X_validation)

predicted_stock_price = sc.inverse_transform(predicted_stock_price)

plt.figure(figsize=(10, 6))
plt.plot(validation_data.index, validation_data.values, color='black', label='AAPL Stock Price')
plt.plot(validation_data.index, predicted_stock_price, color='green', label='Predicted AAPL Stock Price')
plt.title('AAPL Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('AAPL Stock Price')
plt.legend()
plt.show()

mse = mean_squared_error(validation_data.values, predicted_stock_price)
rmse = math.sqrt(mse)
print(f'RMSE: {rmse:.2f}')